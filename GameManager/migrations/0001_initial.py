# Generated by Django 2.1.5 on 2019-01-15 10:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, verbose_name='Игра')),
                ('description', models.TextField(max_length=4096, verbose_name='Описание')),
                ('platform', models.IntegerField(choices=[(1, 'Nintendo Entertainment System'), (2, 'Nintendo Game Boy'), (3, 'Super Nintendo Entertainment System'), (4, 'Nintendo Virtual Boy'), (5, 'Nintendo 64'), (6, 'Nintendo GameCube'), (7, 'Nintendo Game Boy Advance'), (8, 'Nintendo DS'), (9, 'Nintendo Wii'), (10, 'Nintendo 2DS'), (11, 'Nintendo 3DS'), (12, 'Nintendo Wii U'), (13, 'Nintendo Switch')], null=True, verbose_name='Платформа')),
                ('game_image', models.ImageField(blank=True, default='game_images/default_game_image.png', null=True, upload_to='game_images/', verbose_name='Изображение')),
            ],
            options={
                'verbose_name': 'Игра',
                'verbose_name_plural': 'Игры',
                'db_table': 'game',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Уникальное имя - логин', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='avatars/default_avatar.png', null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='О себе')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='owner',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Владелец'),
        ),
    ]
